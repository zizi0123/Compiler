	.text
	.attribute	4, 16
	.attribute	5, "rv32i2p1_m2p0_a2p1_c2p0"
	.file	"output.ll"
	.globl	main                            # -- Begin function main
	.p2align	1
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:                                # %entry
	addi	sp, sp, -16
	.cfi_def_cfa_offset 16
	sw	ra, 12(sp)                      # 4-byte Folded Spill
	.cfi_offset ra, -4
	call	getInt@plt
	lui	a1, %hi(n)
	sw	a0, %lo(n)(a1)
	call	getInt@plt
	lui	a1, %hi(p)
	sw	a1, 8(sp)                       # 4-byte Folded Spill
	sw	a0, %lo(p)(a1)
	call	getInt@plt
	mv	a2, a0
	lw	a0, 8(sp)                       # 4-byte Folded Reload
	lui	a1, %hi(k)
	sw	a2, %lo(k)(a1)
	lw	a0, %lo(p)(a0)
	lw	a1, %lo(k)(a1)
	sub	a0, a0, a1
	li	a1, 1
	bne	a0, a1, .LBB0_2
	j	.LBB0_1
.LBB0_1:                                # %if_true.1
	lui	a0, %hi(.Lstr.1)
	addi	a0, a0, %lo(.Lstr.1)
	call	print@plt
	j	.LBB0_2
.LBB0_2:                                # %if_end.1
	lui	a0, %hi(p)
	lw	a0, %lo(p)(a0)
	lui	a1, %hi(k)
	lw	a1, %lo(k)(a1)
	sub	a0, a0, a1
	lui	a1, %hi(i)
	sw	a0, %lo(i)(a1)
	j	.LBB0_3
.LBB0_3:                                # %for_condition.1
                                        # =>This Inner Loop Header: Depth=1
	lui	a0, %hi(p)
	lw	a0, %lo(p)(a0)
	lui	a1, %hi(k)
	lw	a1, %lo(k)(a1)
	add	a0, a0, a1
	lui	a1, %hi(i)
	lw	a1, %lo(i)(a1)
	blt	a0, a1, .LBB0_15
	j	.LBB0_4
.LBB0_4:                                # %for_body.1
                                        #   in Loop: Header=BB0_3 Depth=1
	lui	a0, %hi(i)
	lw	a1, %lo(i)(a0)
	li	a0, 0
	bge	a0, a1, .LBB0_7
	j	.LBB0_5
.LBB0_5:                                # %shortCut_rhs.1
                                        #   in Loop: Header=BB0_3 Depth=1
	lui	a0, %hi(i)
	lw	a1, %lo(i)(a0)
	lui	a0, %hi(n)
	lw	a0, %lo(n)(a0)
	blt	a0, a1, .LBB0_7
	j	.LBB0_6
.LBB0_6:                                # %shortCut_true.1
                                        #   in Loop: Header=BB0_3 Depth=1
	li	a0, 1
	sw	a0, 4(sp)                       # 4-byte Folded Spill
	j	.LBB0_8
.LBB0_7:                                # %shortCut_false.1
                                        #   in Loop: Header=BB0_3 Depth=1
	li	a0, 0
	sw	a0, 4(sp)                       # 4-byte Folded Spill
	j	.LBB0_8
.LBB0_8:                                # %shortCut_next.1
                                        #   in Loop: Header=BB0_3 Depth=1
	lw	a0, 4(sp)                       # 4-byte Folded Reload
	andi	a0, a0, 1
	beqz	a0, .LBB0_13
	j	.LBB0_9
.LBB0_9:                                # %if_true.2
                                        #   in Loop: Header=BB0_3 Depth=1
	lui	a0, %hi(i)
	lw	a0, %lo(i)(a0)
	lui	a1, %hi(p)
	lw	a1, %lo(p)(a1)
	bne	a0, a1, .LBB0_11
	j	.LBB0_10
.LBB0_10:                               # %if_true.3
                                        #   in Loop: Header=BB0_3 Depth=1
	lui	a0, %hi(.Lstr.2)
	addi	a0, a0, %lo(.Lstr.2)
	call	print@plt
	lui	a0, %hi(i)
	lw	a0, %lo(i)(a0)
	call	toString@plt
	call	print@plt
	lui	a0, %hi(.Lstr.3)
	addi	a0, a0, %lo(.Lstr.3)
	call	print@plt
	j	.LBB0_12
.LBB0_11:                               # %if_false.3
                                        #   in Loop: Header=BB0_3 Depth=1
	lui	a0, %hi(i)
	lw	a0, %lo(i)(a0)
	call	printInt@plt
	lui	a0, %hi(.Lstr.4)
	addi	a0, a0, %lo(.Lstr.4)
	call	print@plt
	j	.LBB0_12
.LBB0_12:                               # %if_end.3
                                        #   in Loop: Header=BB0_3 Depth=1
	j	.LBB0_13
.LBB0_13:                               # %if_end.2
                                        #   in Loop: Header=BB0_3 Depth=1
	j	.LBB0_14
.LBB0_14:                               # %for_step.1
                                        #   in Loop: Header=BB0_3 Depth=1
	lui	a1, %hi(i)
	lw	a0, %lo(i)(a1)
	addi	a0, a0, 1
	sw	a0, %lo(i)(a1)
	j	.LBB0_3
.LBB0_15:                               # %for_end.1
	lui	a0, %hi(p)
	lw	a0, %lo(p)(a0)
	lui	a1, %hi(k)
	lw	a1, %lo(k)(a1)
	add	a0, a0, a1
	lui	a1, %hi(n)
	lw	a1, %lo(n)(a1)
	bge	a0, a1, .LBB0_17
	j	.LBB0_16
.LBB0_16:                               # %if_true.4
	lui	a0, %hi(.Lstr.5)
	addi	a0, a0, %lo(.Lstr.5)
	call	print@plt
	j	.LBB0_17
.LBB0_17:                               # %if_end.4
	li	a0, 0
	lw	ra, 12(sp)                      # 4-byte Folded Reload
	addi	sp, sp, 16
	ret
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc
                                        # -- End function
	.type	p,@object                       # @p
	.section	.sbss,"aw",@nobits
	.globl	p
	.p2align	2
p:
	.word	0                               # 0x0
	.size	p, 4

	.type	i,@object                       # @i
	.globl	i
	.p2align	2
i:
	.word	0                               # 0x0
	.size	i, 4

	.type	k,@object                       # @k
	.globl	k
	.p2align	2
k:
	.word	0                               # 0x0
	.size	k, 4

	.type	n,@object                       # @n
	.globl	n
	.p2align	2
n:
	.word	0                               # 0x0
	.size	n, 4

	.type	.Lstr.1,@object                 # @str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.Lstr.1:
	.asciz	"<< "
	.size	.Lstr.1, 4

	.type	.Lstr.2,@object                 # @str.2
.Lstr.2:
	.asciz	"("
	.size	.Lstr.2, 2

	.type	.Lstr.3,@object                 # @str.3
.Lstr.3:
	.asciz	") "
	.size	.Lstr.3, 3

	.type	.Lstr.4,@object                 # @str.4
.Lstr.4:
	.asciz	" "
	.size	.Lstr.4, 2

	.type	.Lstr.5,@object                 # @str.5
.Lstr.5:
	.asciz	">> "
	.size	.Lstr.5, 4

	.section	".note.GNU-stack","",@progbits
	.addrsig
	.addrsig_sym print
	.addrsig_sym printInt
	.addrsig_sym getInt
	.addrsig_sym toString
	.addrsig_sym p
	.addrsig_sym i
	.addrsig_sym k
	.addrsig_sym n
